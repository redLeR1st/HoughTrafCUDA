//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	_Z12computeAccumPhS_Pjiiiid
.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd
(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};
.const .align 8 .b8 __cudart_sin_cos_coeffs[128] = {186, 94, 120, 249, 101, 219, 229, 61, 70, 210, 176, 44, 241, 229, 90, 190, 146, 227, 172, 105, 227, 29, 199, 62, 161, 98, 219, 25, 160, 1, 42, 191, 24, 8, 17, 17, 17, 17, 129, 63, 84, 85, 85, 85, 85, 85, 197, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 129, 253, 32, 131, 255, 168, 189, 40, 133, 239, 193, 167, 238, 33, 62, 217, 230, 6, 142, 79, 126, 146, 190, 233, 188, 221, 25, 160, 1, 250, 62, 71, 93, 193, 22, 108, 193, 86, 191, 81, 85, 85, 85, 85, 85, 165, 63, 0, 0, 0, 0, 0, 0, 224, 191, 0, 0, 0, 0, 0, 0, 240, 63};

.visible .entry _Z12computeAccumPhS_Pjiiiid(
	.param .u64 _Z12computeAccumPhS_Pjiiiid_param_0,
	.param .u64 _Z12computeAccumPhS_Pjiiiid_param_1,
	.param .u64 _Z12computeAccumPhS_Pjiiiid_param_2,
	.param .u32 _Z12computeAccumPhS_Pjiiiid_param_3,
	.param .u32 _Z12computeAccumPhS_Pjiiiid_param_4,
	.param .u32 _Z12computeAccumPhS_Pjiiiid_param_5,
	.param .u32 _Z12computeAccumPhS_Pjiiiid_param_6,
	.param .f64 _Z12computeAccumPhS_Pjiiiid_param_7
)
{
	.local .align 4 .b8 	__local_depot0[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<20>;
	.reg .b16 	%rs<7>;
	.reg .b32 	%r<114>;
	.reg .f64 	%fd<101>;
	.reg .b64 	%rd<49>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [_Z12computeAccumPhS_Pjiiiid_param_0];
	ld.param.u64 	%rd3, [_Z12computeAccumPhS_Pjiiiid_param_1];
	ld.param.u64 	%rd4, [_Z12computeAccumPhS_Pjiiiid_param_2];
	ld.param.u32 	%r12, [_Z12computeAccumPhS_Pjiiiid_param_3];
	ld.param.u32 	%r13, [_Z12computeAccumPhS_Pjiiiid_param_4];
	ld.param.f64 	%fd34, [_Z12computeAccumPhS_Pjiiiid_param_7];
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %ntid.x;
	mov.u32 	%r16, %tid.x;
	mad.lo.s32 	%r17, %r14, %r15, %r16;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %ntid.y;
	mov.u32 	%r20, %tid.y;
	mad.lo.s32 	%r21, %r18, %r19, %r20;
	mad.lo.s32 	%r1, %r21, %r12, %r17;
	setp.ge.s32	%p1, %r21, %r13;
	setp.ge.s32	%p2, %r17, %r12;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB0_28;

	shr.u32 	%r22, %r12, 31;
	add.s32 	%r23, %r12, %r22;
	shr.s32 	%r24, %r23, 1;
	cvt.rn.f64.s32	%fd1, %r24;
	shr.u32 	%r25, %r13, 31;
	add.s32 	%r26, %r13, %r25;
	shr.s32 	%r27, %r26, 1;
	cvt.rn.f64.s32	%fd2, %r27;
	cvta.to.global.u64 	%rd5, %rd2;
	cvt.s64.s32	%rd6, %r1;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.u8 	%rs1, [%rd7];
	mul.lo.s32 	%r28, %r13, %r12;
	mad.lo.s32 	%r29, %r28, 3, %r1;
	cvta.to.global.u64 	%rd8, %rd3;
	cvt.s64.s32	%rd9, %r29;
	add.s64 	%rd1, %rd8, %rd9;
	setp.lt.u16	%p4, %rs1, 129;
	@%p4 bra 	BB0_4;

	mad.lo.s32 	%r39, %r13, %r12, %r1;
	cvt.s64.s32	%rd11, %r39;
	add.s64 	%rd12, %rd5, %rd11;
	ld.global.u8 	%rs2, [%rd12];
	setp.lt.u16	%p5, %rs2, 129;
	@%p5 bra 	BB0_4;

	shl.b32 	%r50, %r28, 1;
	add.s32 	%r51, %r1, %r50;
	cvt.s64.s32	%rd14, %r51;
	add.s64 	%rd15, %rd5, %rd14;
	ld.global.u8 	%rs3, [%rd15];
	setp.gt.u16	%p6, %rs3, 128;
	@%p6 bra 	BB0_5;
	bra.uni 	BB0_4;

BB0_5:
	cvt.rn.f64.s32	%fd35, %r17;
	sub.f64 	%fd3, %fd35, %fd1;
	cvt.rn.f64.s32	%fd36, %r21;
	sub.f64 	%fd4, %fd36, %fd2;
	mov.u32 	%r111, 0;
	cvta.to.global.u64 	%rd37, %rd4;

BB0_6:
	cvt.rn.f64.s32	%fd37, %r111;
	mul.f64 	%fd96, %fd37, 0d3F91DF46A2529D39;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r74}, %fd96;
	}
	and.b32  	%r3, %r74, 2147483647;
	setp.ne.s32	%p7, %r3, 2146435072;
	mov.f64 	%fd92, %fd96;
	@%p7 bra 	BB0_9;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r75, %temp}, %fd96;
	}
	setp.ne.s32	%p8, %r75, 0;
	mov.f64 	%fd92, %fd96;
	@%p8 bra 	BB0_9;

	mov.f64 	%fd38, 0d0000000000000000;
	mul.rn.f64 	%fd92, %fd96, %fd38;

BB0_9:
	mul.f64 	%fd39, %fd92, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r112, %fd39;
	add.u64 	%rd23, %SP, 4;
	add.u64 	%rd24, %SPL, 4;
	st.local.u32 	[%rd24], %r112;
	cvt.rn.f64.s32	%fd40, %r112;
	neg.f64 	%fd41, %fd40;
	mov.f64 	%fd42, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd43, %fd41, %fd42, %fd92;
	mov.f64 	%fd44, 0d3C91A62633145C00;
	fma.rn.f64 	%fd45, %fd41, %fd44, %fd43;
	mov.f64 	%fd46, 0d397B839A252049C0;
	fma.rn.f64 	%fd93, %fd41, %fd46, %fd45;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r76}, %fd92;
	}
	and.b32  	%r77, %r76, 2145386496;
	setp.lt.u32	%p9, %r77, 1105199104;
	@%p9 bra 	BB0_11;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd92;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd23;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd93, [retval0+0];
	
	//{
	}// Callseq End 0
	ld.local.u32 	%r112, [%rd24];

BB0_11:
	add.s32 	%r7, %r112, 1;
	and.b32  	%r78, %r7, 1;
	shl.b32 	%r79, %r78, 3;
	setp.eq.s32	%p10, %r78, 0;
	selp.f64	%fd47, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p10;
	add.s32 	%r80, %r79, 1;
	mul.wide.s32 	%rd27, %r80, 8;
	mov.u64 	%rd28, __cudart_sin_cos_coeffs;
	add.s64 	%rd29, %rd28, %rd27;
	ld.const.f64 	%fd48, [%rd29];
	mul.rn.f64 	%fd11, %fd93, %fd93;
	fma.rn.f64 	%fd49, %fd47, %fd11, %fd48;
	ld.const.f64 	%fd50, [%rd29+8];
	fma.rn.f64 	%fd51, %fd49, %fd11, %fd50;
	ld.const.f64 	%fd52, [%rd29+16];
	fma.rn.f64 	%fd53, %fd51, %fd11, %fd52;
	ld.const.f64 	%fd54, [%rd29+24];
	fma.rn.f64 	%fd55, %fd53, %fd11, %fd54;
	ld.const.f64 	%fd56, [%rd29+32];
	fma.rn.f64 	%fd57, %fd55, %fd11, %fd56;
	ld.const.f64 	%fd58, [%rd29+40];
	fma.rn.f64 	%fd12, %fd57, %fd11, %fd58;
	fma.rn.f64 	%fd94, %fd12, %fd93, %fd93;
	@%p10 bra 	BB0_13;

	mov.f64 	%fd59, 0d3FF0000000000000;
	fma.rn.f64 	%fd94, %fd12, %fd11, %fd59;

BB0_13:
	and.b32  	%r81, %r7, 2;
	setp.eq.s32	%p11, %r81, 0;
	@%p11 bra 	BB0_15;

	mov.f64 	%fd60, 0d0000000000000000;
	mov.f64 	%fd61, 0dBFF0000000000000;
	fma.rn.f64 	%fd94, %fd94, %fd61, %fd60;

BB0_15:
	@%p7 bra 	BB0_18;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r82, %temp}, %fd96;
	}
	setp.ne.s32	%p13, %r82, 0;
	@%p13 bra 	BB0_18;

	mov.f64 	%fd62, 0d0000000000000000;
	mul.rn.f64 	%fd96, %fd96, %fd62;

BB0_18:
	mul.f64 	%fd63, %fd96, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r113, %fd63;
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd31, %SPL, 0;
	st.local.u32 	[%rd31], %r113;
	cvt.rn.f64.s32	%fd64, %r113;
	neg.f64 	%fd65, %fd64;
	fma.rn.f64 	%fd67, %fd65, %fd42, %fd96;
	fma.rn.f64 	%fd69, %fd65, %fd44, %fd67;
	fma.rn.f64 	%fd97, %fd65, %fd46, %fd69;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r83}, %fd96;
	}
	and.b32  	%r84, %r83, 2145386496;
	setp.lt.u32	%p14, %r84, 1105199104;
	@%p14 bra 	BB0_20;

	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd96;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd30;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd97, [retval0+0];
	
	//{
	}// Callseq End 1
	ld.local.u32 	%r113, [%rd31];

BB0_20:
	and.b32  	%r85, %r113, 1;
	shl.b32 	%r86, %r85, 3;
	setp.eq.s32	%p15, %r85, 0;
	selp.f64	%fd71, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p15;
	add.s32 	%r87, %r86, 1;
	mul.wide.s32 	%rd34, %r87, 8;
	add.s64 	%rd36, %rd28, %rd34;
	ld.const.f64 	%fd72, [%rd36];
	mul.rn.f64 	%fd23, %fd97, %fd97;
	fma.rn.f64 	%fd73, %fd71, %fd23, %fd72;
	ld.const.f64 	%fd74, [%rd36+8];
	fma.rn.f64 	%fd75, %fd73, %fd23, %fd74;
	ld.const.f64 	%fd76, [%rd36+16];
	fma.rn.f64 	%fd77, %fd75, %fd23, %fd76;
	ld.const.f64 	%fd78, [%rd36+24];
	fma.rn.f64 	%fd79, %fd77, %fd23, %fd78;
	ld.const.f64 	%fd80, [%rd36+32];
	fma.rn.f64 	%fd81, %fd79, %fd23, %fd80;
	ld.const.f64 	%fd82, [%rd36+40];
	fma.rn.f64 	%fd24, %fd81, %fd23, %fd82;
	fma.rn.f64 	%fd98, %fd24, %fd97, %fd97;
	@%p15 bra 	BB0_22;

	mov.f64 	%fd83, 0d3FF0000000000000;
	fma.rn.f64 	%fd98, %fd24, %fd23, %fd83;

BB0_22:
	and.b32  	%r88, %r113, 2;
	setp.eq.s32	%p16, %r88, 0;
	@%p16 bra 	BB0_24;

	mov.f64 	%fd84, 0d0000000000000000;
	mov.f64 	%fd85, 0dBFF0000000000000;
	fma.rn.f64 	%fd98, %fd98, %fd85, %fd84;

BB0_24:
	mul.f64 	%fd86, %fd4, %fd98;
	fma.rn.f64 	%fd87, %fd3, %fd94, %fd86;
	add.f64 	%fd100, %fd87, %fd34;
	abs.f64 	%fd31, %fd100;
	setp.ge.f64	%p17, %fd31, 0d4330000000000000;
	@%p17 bra 	BB0_26;

	add.f64 	%fd88, %fd31, 0d3FE0000000000000;
	cvt.rzi.f64.f64	%fd89, %fd88;
	setp.lt.f64	%p18, %fd31, 0d3FE0000000000000;
	selp.f64	%fd90, 0d0000000000000000, %fd89, %p18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r89, %temp}, %fd90;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r90}, %fd90;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r91}, %fd100;
	}
	and.b32  	%r92, %r91, -2147483648;
	or.b32  	%r93, %r90, %r92;
	mov.b64 	%fd100, {%r89, %r93};

BB0_26:
	mul.f64 	%fd91, %fd100, 0d4066800000000000;
	cvt.rzi.s32.f64	%r94, %fd91;
	add.s32 	%r95, %r94, %r111;
	mul.wide.s32 	%rd38, %r95, 4;
	add.s64 	%rd39, %rd37, %rd38;
	atom.global.add.u32 	%r96, [%rd39], 1;
	add.s32 	%r111, %r111, 1;
	setp.ne.s32	%p19, %r111, 180;
	@%p19 bra 	BB0_6;

	add.s64 	%rd42, %rd8, %rd6;
	mov.u16 	%rs6, 255;
	st.global.u8 	[%rd42], %rs6;
	add.s32 	%r107, %r1, %r28;
	cvt.s64.s32	%rd43, %r107;
	add.s64 	%rd44, %rd8, %rd43;
	st.global.u8 	[%rd44], %rs6;
	add.s64 	%rd46, %rd8, %rd14;
	st.global.u8 	[%rd46], %rs6;
	st.global.u8 	[%rd1], %rs6;
	bra.uni 	BB0_28;

BB0_4:
	add.s64 	%rd18, %rd8, %rd6;
	mov.u16 	%rs4, 0;
	st.global.u8 	[%rd18], %rs4;
	add.s32 	%r62, %r1, %r28;
	cvt.s64.s32	%rd19, %r62;
	add.s64 	%rd20, %rd8, %rd19;
	st.global.u8 	[%rd20], %rs4;
	shl.b32 	%r63, %r28, 1;
	add.s32 	%r64, %r1, %r63;
	cvt.s64.s32	%rd21, %r64;
	add.s64 	%rd22, %rd8, %rd21;
	st.global.u8 	[%rd22], %rs4;
	mov.u16 	%rs5, 255;
	st.global.u8 	[%rd1], %rs5;

BB0_28:
	ret;
}

.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<42>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<101>;


	mov.u64 	%SPL, __local_depot1;
	ld.param.f64 	%fd4, [__internal_trig_reduction_slowpathd_param_0];
	ld.param.u64 	%rd37, [__internal_trig_reduction_slowpathd_param_1];
	add.u64 	%rd1, %SPL, 0;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd4;
	}
	and.b32  	%r40, %r1, -2147483648;
	shr.u32 	%r3, %r1, 20;
	bfe.u32 	%r4, %r1, 20, 11;
	setp.eq.s32	%p1, %r4, 2047;
	@%p1 bra 	BB1_13;

	add.s32 	%r15, %r4, -1024;
	shr.u32 	%r16, %r15, 6;
	mov.u32 	%r17, 15;
	sub.s32 	%r5, %r17, %r16;
	mov.u32 	%r18, 19;
	sub.s32 	%r19, %r18, %r16;
	mov.u32 	%r20, 18;
	min.s32 	%r6, %r20, %r19;
	mov.u64 	%rd94, 0;
	setp.ge.s32	%p2, %r5, %r6;
	mov.u64 	%rd93, %rd1;
	@%p2 bra 	BB1_4;

	bfe.u32 	%r21, %r1, 20, 11;
	add.s32 	%r22, %r21, -1024;
	shr.u32 	%r23, %r22, 6;
	sub.s32 	%r25, %r17, %r23;
	mul.wide.s32 	%rd41, %r25, 8;
	mov.u64 	%rd42, __cudart_i2opi_d;
	add.s64 	%rd89, %rd42, %rd41;
	mov.b64 	 %rd43, %fd4;
	shl.b64 	%rd44, %rd43, 11;
	or.b64  	%rd5, %rd44, -9223372036854775808;
	mov.u64 	%rd94, 0;
	mov.u64 	%rd93, %rd1;
	mov.u64 	%rd91, %rd1;
	mov.u32 	%r39, %r5;

BB1_3:
	.pragma "nounroll";
	ld.const.u64 	%rd47, [%rd89];
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
	mov.b64         {alo,ahi}, %rd47;    
	mov.b64         {blo,bhi}, %rd5;    
	mov.b64         {clo,chi}, %rd94;    
	mad.lo.cc.u32   r0, alo, blo, clo;
	madc.hi.cc.u32  r1, alo, blo, chi;
	madc.hi.u32     r2, alo, bhi,   0;
	mad.lo.cc.u32   r1, alo, bhi,  r1;
	madc.hi.cc.u32  r2, ahi, blo,  r2;
	madc.hi.u32     r3, ahi, bhi,   0;
	mad.lo.cc.u32   r1, ahi, blo,  r1;
	madc.lo.cc.u32  r2, ahi, bhi,  r2;
	addc.u32        r3,  r3,   0;     
	mov.b64         %rd45, {r0,r1};      
	mov.b64         %rd94, {r2,r3};      
	}
	// inline asm
	st.local.u64 	[%rd91], %rd45;
	add.s32 	%r39, %r39, 1;
	sub.s32 	%r26, %r39, %r5;
	mul.wide.s32 	%rd50, %r26, 8;
	add.s64 	%rd91, %rd1, %rd50;
	add.s64 	%rd93, %rd93, 8;
	add.s64 	%rd89, %rd89, 8;
	setp.lt.s32	%p3, %r39, %r6;
	@%p3 bra 	BB1_3;

BB1_4:
	st.local.u64 	[%rd93], %rd94;
	ld.local.u64 	%rd95, [%rd1+16];
	ld.local.u64 	%rd96, [%rd1+24];
	and.b32  	%r9, %r3, 63;
	setp.eq.s32	%p4, %r9, 0;
	@%p4 bra 	BB1_6;

	mov.u32 	%r27, 64;
	sub.s32 	%r28, %r27, %r9;
	shl.b64 	%rd51, %rd96, %r9;
	shr.u64 	%rd52, %rd95, %r28;
	or.b64  	%rd96, %rd51, %rd52;
	shl.b64 	%rd53, %rd95, %r9;
	ld.local.u64 	%rd54, [%rd1+8];
	shr.u64 	%rd55, %rd54, %r28;
	or.b64  	%rd95, %rd55, %rd53;

BB1_6:
	shr.u64 	%rd56, %rd96, 62;
	cvt.u32.u64	%r29, %rd56;
	shr.u64 	%rd57, %rd95, 62;
	shl.b64 	%rd58, %rd96, 2;
	or.b64  	%rd98, %rd58, %rd57;
	shl.b64 	%rd97, %rd95, 2;
	shr.u64 	%rd59, %rd96, 61;
	cvt.u32.u64	%r30, %rd59;
	and.b32  	%r31, %r30, 1;
	add.s32 	%r32, %r31, %r29;
	neg.s32 	%r33, %r32;
	setp.eq.s32	%p5, %r40, 0;
	selp.b32	%r34, %r32, %r33, %p5;
	cvta.to.local.u64 	%rd60, %rd37;
	st.local.u32 	[%rd60], %r34;
	setp.eq.s32	%p6, %r31, 0;
	@%p6 bra 	BB1_8;

	mov.u64 	%rd64, 0;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd64;
	mov.b64         {a2,a3}, %rd64;
	mov.b64         {b0,b1}, %rd97;
	mov.b64         {b2,b3}, %rd98;
	sub.cc.u32      r0, a0, b0; 
	subc.cc.u32     r1, a1, b1; 
	subc.cc.u32     r2, a2, b2; 
	subc.u32        r3, a3, b3; 
	mov.b64         %rd97, {r0,r1};
	mov.b64         %rd98, {r2,r3};
	}
	// inline asm
	xor.b32  	%r40, %r40, -2147483648;

BB1_8:
	clz.b64 	%r41, %rd98;
	setp.eq.s32	%p7, %r41, 0;
	@%p7 bra 	BB1_10;

	shl.b64 	%rd67, %rd98, %r41;
	mov.u32 	%r35, 64;
	sub.s32 	%r36, %r35, %r41;
	shr.u64 	%rd68, %rd97, %r36;
	or.b64  	%rd98, %rd68, %rd67;

BB1_10:
	mov.u64 	%rd72, -3958705157555305931;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
	mov.b64         {alo,ahi}, %rd98;   
	mov.b64         {blo,bhi}, %rd72;   
	mul.lo.u32      r0, alo, blo;    
	mul.hi.u32      r1, alo, blo;    
	mad.lo.cc.u32   r1, alo, bhi, r1;
	madc.hi.u32     r2, alo, bhi,  0;
	mad.lo.cc.u32   r1, ahi, blo, r1;
	madc.hi.cc.u32  r2, ahi, blo, r2;
	madc.hi.u32     r3, ahi, bhi,  0;
	mad.lo.cc.u32   r2, ahi, bhi, r2;
	addc.u32        r3, r3,  0;      
	mov.b64         %rd69, {r0,r1};     
	mov.b64         %rd100, {r2,r3};     
	}
	// inline asm
	setp.lt.s64	%p8, %rd100, 1;
	@%p8 bra 	BB1_12;

	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd69;
	mov.b64         {a2,a3}, %rd100;
	mov.b64         {b0,b1}, %rd69;
	mov.b64         {b2,b3}, %rd100;
	add.cc.u32      r0, a0, b0; 
	addc.cc.u32     r1, a1, b1; 
	addc.cc.u32     r2, a2, b2; 
	addc.u32        r3, a3, b3; 
	mov.b64         %rd73, {r0,r1};
	mov.b64         %rd100, {r2,r3};
	}
	// inline asm
	add.s32 	%r41, %r41, 1;

BB1_12:
	cvt.u64.u32	%rd79, %r40;
	shl.b64 	%rd80, %rd79, 32;
	mov.u32 	%r37, 1022;
	sub.s32 	%r38, %r37, %r41;
	cvt.u64.u32	%rd81, %r38;
	shl.b64 	%rd82, %rd81, 52;
	add.s64 	%rd83, %rd100, 1;
	shr.u64 	%rd84, %rd83, 10;
	add.s64 	%rd85, %rd84, 1;
	shr.u64 	%rd86, %rd85, 1;
	add.s64 	%rd87, %rd86, %rd82;
	or.b64  	%rd88, %rd87, %rd80;
	mov.b64 	 %fd4, %rd88;

BB1_13:
	st.param.f64	[func_retval0+0], %fd4;
	ret;
}


